const path = require('path');
const { Payments, User } = require("../models/schemas");

function showPaymentPage(req,res) {
    res.sendFile(path.join(__dirname , ".." , "views", "index.html"));
}

async function  insertRec(req,res) {
    console.log('Here in Insert'); 
    try{
        if(!req.body)
        { throw new Error('Missing request body')};
        let records = req.body;
        console.log('Records', records);
        let response = await Payments.create(records);
        res.send(response);
        // //Extract data from the request body
        // const { recordName, description, category, date } = req.body;
  
        // // Create a new record document
        // const newRecord = new Record({
        //   name: recordName,
        //   description: description,
        //   category: category,
        //   date: date,
        //   // Add other fields as needed
        // });
  
        // // Save the new record to the database
        // await newRecord.save();
  
      //  const { paymentmethod, cardname, cardno, expirydate } = req.body;
  
        // // Create a new record document
        // const newRecord = new Record({
        //   paymentMethod: paymentmethod,
        //   cardName: cardname,
        //   cardNumber: cardno,
        //   expiryDate: expirydate,
        //   // Add other fields as needed
       
       // });
  
        // Save the new record to the database
       // await newRecord.save();
  
    }
    catch(err)
    {
      res.status(500).send("Insert Records : error : " + err.message);
    }
  }
  async function showRec(req,res) {
    // console.log('Here in show'); 
     try{
       const records = await Payments.find();
       res.send(records);
      // res.render('showrecords', {records});
     }
     catch(err)
     {
       res.status(500).send("Show Records : error : " + err.message);
     } 
   }
   
   // Controller method for deleting a payment record
   async function deleteRec(req, res) {
       try {
           const recordId = req.params.id;
   
           // Validate if the recordId is a valid ObjectId
           if (!recordId.match(/^[0-9a-fA-F]{24}$/)) {
               return res.status(400).json({ error: 'Invalid record ID' });
           }
   
           // Use Mongoose to find and delete the record by ID
           const deletedRecord = await Payments.findByIdAndDelete(recordId);
   
           if (!deletedRecord) {
               return res.status(404).json({ error: 'Record not found' });
           }
   
           res.json({ message: 'Record deleted successfully' });
       } catch (error) {
           console.error('Error during record deletion:', error);
           res.status(500).json({ error: 'Internal Server Error' });
       }
   }
   
 async function showLoginPage(req,res) {
  console.log("Here login");
    res.sendFile(path.join(__dirname , ".." , "views", "login.html"));
}

// Controller method for handling login
async function verifylogin(req, res){
    try {
      // Extract credentials from the request body
      const { userid, password } = req.body;
        console.log('1.' + userid);
      // Retrieve user from the database based on the provided username
      const user = await User.findOne({ userid });
      console.log('2.' + user.userid);
      console.log('3.' + user.password);
      // Check if the user exists and the password is correct
      if (user && user.password === password) {
        // Successful login
        res.send('Login successful');
      } else {
        // Invalid credentials
        res.send('Invalid username or password');
      }
    } catch (error) {
      console.error('Error during login:', error);
      res.status(500).send('Internal Server Error');
    }
  };


module.exports = { showPaymentPage, 
    insertRec, showRec, deleteRec, showLoginPage, verifylogin};